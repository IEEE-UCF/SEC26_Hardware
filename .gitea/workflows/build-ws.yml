# Process for building and pushing the workspace docker file

name: Docker Workspace Build and Push

on:
  pull_request:
    branches:
      - main
      - build/all
    types:
      - opened
      - synchronize
  push:
    branches:
      - main
      - build/all
  workflow_dispatch: # Allow to trigger from UI

jobs:
  docker-health-check:
    name: Docker Health Check
    if: "!startsWith(github.head_ref, 'doc')"
    runs-on: [ubuntu-latest, linux-amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create simple Dockerfile for testing
        run: |
          echo 'FROM alpine:latest' > Dockerfile.healthcheck
          echo 'RUN echo "Health check image built successfully!"' >> Dockerfile.healthcheck

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          # IMPORTANT: Replace with your registry URL, or use a secret
          registry: ${{ vars.REGISTRY_URL_PORT }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push health-check image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.healthcheck
          push: true
          platforms: linux/amd64, linux/arm64
          tags: ${{ vars.REGISTRY_URL_PORT }}/healthcheck:${{ github.sha }}

  build-and-push:
    name: Build & Push for ${{ matrix.platform }}
    needs: docker-health-check
    if: "!startsWith(github.head_ref, 'doc')"
    runs-on: [ubuntu-latest, linux-amd64]

    # Add a strategy to build platforms sequentially
    strategy:
      fail-fast: false # Allows all builds to finish even if one fails
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    # Setup perms for Gitea's package registry
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Sanitize branch name for Docker tag
        id: sanitize
        run: |
          BRANCH_SLUG=$(echo "${{ github.head_ref || github.ref_name }}" | sed 's/[^a-zA-Z0-9.-]/-/g')
          echo "BRANCH_SLUG=${BRANCH_SLUG}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY_URL_PORT }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dev_ws/Dockerfile
          push: true
          # Build only one platform at a time from the matrix
          platforms: ${{ matrix.platform }}
          tags: |
            ${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:latest
            ${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:${{ github.sha }}
          # Update cache refs to be platform-specific to avoid conflicts
          cache-from: |
            type=registry,ref=${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:cache-${{ env.BRANCH_SLUG }}-${{ matrix.platform }}
            type=registry,ref=${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:cache-main-${{ matrix.platform }}
          cache-to: type=registry,ref=${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:cache-${{ env.BRANCH_SLUG }}-${{ matrix.platform }},mode=max