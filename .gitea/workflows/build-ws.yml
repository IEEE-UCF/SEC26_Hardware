# Process for building and pushing the workspace docker file

name: Docker Workspace Build and Push

on:
  pull_request:
    branches:
      - main
      - build/all
    types:
      - opened
      - synchronize
  push:
    branches:
      - main
      - build/all
  workflow_dispatch: # Allow to trigger from UI

jobs:
  docker-health-check:
    name: Docker Health Check
    if: "!startsWith(github.head_ref, 'doc')"
    runs-on: [ubuntu-latest, linux-amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create simple Dockerfile for testing
        run: |
          echo 'FROM alpine:latest' > Dockerfile.healthcheck
          echo 'RUN echo "Health check image built successfully!"' >> Dockerfile.healthcheck

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          # IMPORTANT: Replace with your registry URL, or use a secret
          registry: ${{ vars.REGISTRY_URL_PORT }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push health-check image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.healthcheck
          push: true
          tags: ${{ vars.REGISTRY_URL_PORT }}/healthcheck:${{ github.sha }}

  build-and-push:
    name: Build and Push Workspace Docker Image
    needs: docker-health-check
    if: "!startsWith(github.head_ref, 'doc')"
    runs-on: [ubuntu-latest, linux-amd64]

    # Setup perms for Gitea's package registry
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      # Sanitize docker tags        
      - name: Sanitize branch name for Docker tag
        id: sanitize
        run: |
          # Replaces any character that is not a letter, number, '.', or '-' with a '-'
          BRANCH_SLUG=$(echo "${{ github.head_ref || github.ref_name }}" | sed 's/[^a-zA-Z0-9.-]/-/g')
          echo "BRANCH_SLUG=${BRANCH_SLUG}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY_URL_PORT }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        # This action builds the Docker image from your Dockerfile and pushes it to the registry.
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dev_ws/arduino_install/Dockerfile  # Path to your Dockerfile
          push: true
          tags: |
            ${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:latest
            ${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:${{ github.sha }}
          # Caching strategy:
          # - cache-from: Tries to pull cache first from a branch-specific layer, then falls back to the main branch cache.
          #   This prevents cache conflicts between PRs while sharing a common base.
          # - cache-to: Pushes the cache layers only to a branch-specific tag, ensuring PRs don't overwrite each other's cache.
          #   The 'mode=max' ensures all layers are written for the most effective caching.
          cache-from: |
            type=registry,ref=${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:cache-${{ env.BRANCH_SLUG }}
            type=registry,ref=${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:cache-main
          cache-to: type=registry,ref=${{ vars.REGISTRY_URL_PORT }}/syndric/ws-arduino-ros:cache-${{ env.BRANCH_SLUG }},mode=max